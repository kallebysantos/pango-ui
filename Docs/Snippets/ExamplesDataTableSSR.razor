@* Using naviagtion for SSR pagination *@
@inject NavigationManager Nav

@* Same parameters as QuickGrid *@
<DataTable Items=@(people) Pagination=@(pagination)>
  <PropertyColumn Property="@(p => p.PersonId)" Sortable=@(true) />
  <PropertyColumn Property="@(p => p.Name)" Sortable=@(true) />
  <PropertyColumn Property="@(p => p.PromotionDate)" Format="yyyy-MM-dd" Sortable=@(true) />
</DataTable>

@* Same parameters as Paginator *@
@* SSR Only: You can ignore `PageUrl` for interactive rendermode apps *@
<DataTablePagination State=@(pagination) PageUrl=@(PageUrl) />

@code {
  [SupplyParameterFromQuery]
  public string? Page { get; set; }

  PaginationState pagination = new PaginationState { ItemsPerPage = 2 };

  protected override async Task OnParametersSetAsync()
  {
    // SSR pagination support
    var isValidNumber = int.TryParse(Page, out var pageIndex);

    await pagination.SetCurrentPageIndexAsync(isValidNumber ? pageIndex : 0);
  }

  private string PageUrl(int page)
    => Nav.GetUriWithQueryParameter("page", page);

  private record Person(int PersonId, string Name, DateOnly PromotionDate);

  private IQueryable<Person> people = new[]
  {
    new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
    new Person(10944, "Ant√≥nio Langa", new DateOnly(1991, 12, 1)),
    new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
    new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
    new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
    new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
  }
  .AsQueryable();
}
