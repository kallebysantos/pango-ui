@page "/input"

@using System.ComponentModel.DataAnnotations

<section class="h-full flex-1 flex flex-col items-center justify-center">
  <div class="flex-1 grid grid-cols-1 w-full md:grid-cols-2 lg:max-w-5xl gap-8 p-6">
    <div>
      <Tabs DefaultValue="preview" Variant=@(Tabs.Variants.Underline)>
        <TabsList>
          <TabsTrigger Value="preview">Preview</TabsTrigger>
          <TabsTrigger Value="code">Code</TabsTrigger>
        </TabsList>

        <TabsContent Value="preview" class="flex flex-col gap-8 px-4 py-8 items-center border">
          @if (!string.IsNullOrEmpty(Text))
          {
            <p class="text-4xl text-muted-foreground/50">
              @Text
            </p>
          }
          <Input @bind-Value=@(Text) placeholder="write something here" />

          <label class="w-full flex flex-col gap-1">
            <span class="text-sm font-medium">
              Readonly
            </span>
            <Input Value=@(Text) ReadOnly placeholder="nothing here" />
          </label>

          <div class="w-full flex flex-col gap-3 items-end">
            <EditForm Model=@(this) FormName="email-example-form" Enhance OnValidSubmit=@(HandleEmail)
              class="w-full flex flex-col gap-2">
              <DataAnnotationsValidator />
              <div class="flex gap-2 flex-col md:flex-row md:items-end">
                <label class="flex-1 flex flex-col gap-1">
                  <span class="text-sm font-medium">
                    Using with <strong>EditForm</strong>
                  </span>
                  <Input @bind-Value=@(EmailText) placeholder="Email address" />
                  <ValidationMessage class="md:hidden text-sm text-destructive" For=@(() => EmailText) />
                </label>

                <Button type="submit">
                  Submit
                </Button>
              </div>

              <ValidationMessage class="hidden md:block text-sm text-destructive" For=@(() => EmailText) />
            </EditForm>

            @if (hasEmailSent)
            {
              <Alert Variant=@(Alert.Variants.Sucess) OnDismiss=@(() => hasEmailSent = false)>
                <AlertSide>
                  <i class="ph ph-check text-lg"></i>
                </AlertSide>
                <AlertTitle>Sucess</AlertTitle>
                <AlertDescription>
                  Activation email sent to <strong class="font-medium">@EmailText</strong>
                </AlertDescription>
              </Alert>
            }
          </div>
        </TabsContent>

        <TabsContent Value="code" class="flex flex-col gap-4 items-center">
          <Code Language="razor" class="[&_pre]:max-h-80">
            @(InputCodeExample)
          </Code>
        </TabsContent>
      </Tabs>
    </div>

    <div class="flex flex-col gap-4">
      <div class="flex flex-col gap-2">
        <div class="flex flex-col gap-2">
          <h2 class="pb-2 border-b text-xl leading-snug font-semibold tracking-tight">
            Installation
          </h2>

          <Code Language="fish" class="py-2">dotnet pango add input</Code>
        </div>

      </div>
      <ApiReference Component=@(typeof(Input))
        Href="https://learn.microsoft.com/en-us/aspnet/core/blazor/forms/input-components">
        <Description>Displays a form input field or a component that looks like an input field.</Description>
      </ApiReference>
    </div>
  </div>
</section>

@code {
  string Text = string.Empty;

  [SupplyParameterFromForm]
  [EmailAddress(ErrorMessage = "Its not a valid email address.")]
  [Required(ErrorMessage = "Email address is required.")]
  public string? EmailText { get; set; }

  bool hasEmailSent;

  protected void HandleEmail()
  {
    hasEmailSent = true;
  }
}
