@namespace Pango.UI.Components

@using System.Diagnostics
@using TailwindMerge

@inject IJSRuntime JS

<div @ref="@(codeContainerRef)" id="pango-ui-code" data-language="@(Language)"
  class=@Tw([
    "relative flex w-full border p-4 transition-all dark:bg-zinc-950 rounded data-[loading]:bg-muted data-[loading]:animate-pulse",
    AdditionalAttributes?.GetValueOrDefault("class")?.ToString()
  ])
  data-loading="@(IsLoading)">
  <div id="pango-ui-code-container"
    class="relative flex-1 overflow-hidden after:absolute after:inset-y-0 after:left-0 after:w-auto [&_.line:before]:sticky [&_.line:before]:left-2 [&_.line:before]:z-10 [&_.line:before]:translate-y-[-1px] [&_.line:before]:pr-1 [&_pre]:first:hidden [&_pre]:first:dark:block [&_pre]:last:block [&_pre]:last:dark:hidden [&_pre]:h-[--height] [&_pre]:overflow-hidden [&_pre]:!bg-transparent [&_pre]:py-1 [&_pre]:font-mono [&_pre]:text-sm [&_pre]:leading-relaxed">
  </div>
  <div class=@Tw([
    "flex focus-within:outline absolute inset-0 p-4",
    AdditionalAttributes?.GetValueOrDefault("class")?.ToString()
  ])>
  <textarea 
  wrap="off"
  autocomplete="off"
  autocorrect="off"
  autocapitalize="off"
  spellcheck="false"
  class="flex-1 outline-none w-full h-full py-1 whitespace-pre overflow-auto resize-none font-mono text-sm leading-relaxed bg-transparent text-transparent">@ChildContent</textarea>

  </div>
</div>

@code {
  [Parameter]
  public RenderFragment? ChildContent { get; set; }

  [Parameter, EditorRequired]
  public required string Language { get; set; }

  /// <summary>
  /// Gets or sets a collection of additional attributes that will be applied to the created element.
  /// </summary>
  [Parameter(CaptureUnmatchedValues = true)]
  public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

  [Inject]
  protected TwMerge TwMerge { get; set; } = null!;

  /// <summary>
  /// Merge Tailwind CSS classes without style conflicts
  /// </summary>
  public string? Tw(params string?[] classNames) => TwMerge.Merge(classNames);

  private ElementReference codeContainerRef;

  private IJSObjectReference? jsModule;

  private bool IsLoading = false;
  private bool IsCodeRendered = false;

  protected override async Task OnInitializedAsync()
  {
    // Blazor interactive wasm load once
    // It will trhows on static-site prerendering
    try
    {
      IsLoading = true;
      await ApplySyntaxtHighlight();
      IsLoading = false;
    }
    catch (Exception e)
    {
      Debug.WriteLine(e);
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    // Blazor interactive pre-rendered load once
    if (firstRender && !IsLoading)
    {
      IsLoading = true;
      await ApplySyntaxtHighlight();
      IsLoading = false;
    }
  }

  protected async Task ApplySyntaxtHighlight()
  {
    if (JS is null || IsCodeRendered) return;

    jsModule ??= await JS.InvokeAsync<IJSObjectReference>(
    "import",
    "./Components/Code/Code.razor.js"
    );

    if (jsModule is null) return;

    await jsModule.InvokeVoidAsync("ApplySyntaxHighlight", codeContainerRef);

    IsCodeRendered = true;
  }
}
